<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>author</key>
	<string>Victor Petrovykh vpetrovykh@sprymix.com</string>
	<key>fileTypes</key>
	<array>
		<string>py</string>
		<string>py3</string>
		<string>rpy</string>
		<string>pyw</string>
		<string>cpy</string>
		<string>SConstruct</string>
		<string>Sconstruct</string>
		<string>sconstruct</string>
		<string>SConscript</string>
	</array>
	<key>name</key>
	<string>MagicPython</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#statement</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#expression</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>annotated-parameter</key>
		<dict>
			<key>begin</key>
			<string>(?x)
  \b
  ([[:alpha:]_]\w*) \s* (:)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.language.pyhton</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.annotation.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(,)|(?=\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.python</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\=</string>
					<key>name</key>
					<string>keyword.operator.assignment.python</string>
				</dict>
			</array>
		</dict>
		<key>assignment-operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)
     &lt;&lt;= | &gt;&gt;= | //= | \*\*=
    | \+= | -= | /=
    | \*= | %= | ~= | ^= | &amp;= | \|=
    | =
</string>
					<key>name</key>
					<string>keyword.operator.assignment.python</string>
				</dict>
			</array>
		</dict>
		<key>builtin-callables</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#illegal-names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-exceptions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-functions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-types</string>
				</dict>
			</array>
		</dict>
		<key>builtin-exceptions</key>
		<dict>
			<key>match</key>
			<string>(?x) \b(
  (
    Arithmetic | Assertion | Attribute | Buffer | BlockingIO
    | BrokenPipe | ChildProcess
    | (Connection (Aborted | Refused | Reset)?)
    | EOF | Environment | FileExists | FileNotFound
    | FloatingPoint | IO | Import | Indentation | Index | Interrupted
    | IsADirectory | NotADirectory | Permission | ProcessLookup
    | Timeout
    | Key | Lookup | Memory | Name | NotImplemented | OS | Overflow
    | Reference | Runtime | Recursion | Standard | Syntax | System
    | Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?
    | Value | VMS | Windows | ZeroDivision
  )? Error
|
  ((Pending)?Deprecation | Runtime | Syntax | User | Future | Import
    | Unicode | Bytes | Resource
  )? Warning
|
  SystemExit | Stop(Async)?Iteration | NotImplemented
  | KeyboardInterrupt
  | GeneratorExit | Exception
)\b
</string>
			<key>name</key>
			<string>support.type.exception.python</string>
		</dict>
		<key>builtin-functions</key>
		<dict>
			<key>match</key>
			<string>(?x)
  (?&lt;!\.)\b(
    __import__ | abs | all | any | apply | callable | chr | cmp | coerce
    | compile | copyright | credits | delattr | dir | divmod | enumerate
    | eval | exec | execfile | exit | filter | format | getattr
    | globals | hasattr | hash | help | id | input | intern
    | isinstance | issubclass | iter | len | license | locals | map
    | max | memoryview | min | next | open | ord | pow | print
    | quit | range | raw_input | reduce | reload | repr | round
    | setattr | sorted | sum | unichr | vars | zip
  )\b
</string>
			<key>name</key>
			<string>support.function.builtin.python</string>
		</dict>
		<key>builtin-possible-callables</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-callables</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#magic-function-names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#magic-variable-names</string>
				</dict>
			</array>
		</dict>
		<key>builtin-types</key>
		<dict>
			<key>match</key>
			<string>(?x)
  (?&lt;!\.)\b(
    ascii | basestring | bin | bool | buffer | bytearray | bytes
    | classmethod | complex | dict | file | float | frozenset
    | hex | int | list | long | object | oct | property | reversed
    | set | slice | staticmethod | str | super | tuple | type
    | unicode | xrange
  )\b
</string>
			<key>name</key>
			<string>support.type.python</string>
		</dict>
		<key>call-wrapper-inheritance</key>
		<dict>
			<key>begin</key>
			<string>(?x)
  \b(?=
    ([[:alpha:]_]\w*) \s* (\()
  )
</string>
			<key>comment</key>
			<string>same as a funciton call, but in inheritance context</string>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.end.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function-call.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#inheritance-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-arguments</string>
				</dict>
			</array>
		</dict>
		<key>class-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  \s*(class)\s+
    (?=
      [[:alpha:]_]\w* \s* (:|\()
    )
</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.python</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(:)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.class.begin.python</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.class.python</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#class-name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#class-inheritance</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>class-inheritance</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.inheritance.begin.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.inheritance.end.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.class.inheritance.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.inheritance.python</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\=</string>
					<key>name</key>
					<string>keyword.operator.assignment.python</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#call-wrapper-inheritance</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#illegal-names</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[[:alnum:]_]</string>
					<key>name</key>
					<string>entity.other.inherited-class.pyhton</string>
				</dict>
			</array>
		</dict>
		<key>class-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-possible-callables</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  \b ([[:alpha:]_]\w*) \b
</string>
					<key>name</key>
					<string>entity.name.type.class.python</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.python</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.line.note.notation.python</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\#)\s*(BUG|FIXME|TODO|XXX)?.*</string>
			<key>name</key>
			<string>comment.line.number-sign.python</string>
		</dict>
		<key>curly-braces</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.dict.begin.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.dict.end.python</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>decorator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  ^\s*
  (@) \s* (?=
            [[:alpha:]_]\w* (?:\.[[:alpha:]_]\w*)* \s*
              (?:$|\#)
          )
</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.decorator.python</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$|(?=\#)</string>
					<key>name</key>
					<string>meta.function.decorator.python</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#decorator-name</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  ^\s*
  (@) \s* (?=
            [[:alpha:]_]\w* (?:\.[[:alpha:]_]\w*)* \s* \(
          )
</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.decorator.python</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.python</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.decorator.python</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#decorator-name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-arguments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>decorator-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-callables</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  ([[:alpha:]_]\w*) | \.
</string>
					<key>name</key>
					<string>entity.name.function.decorator.python</string>
				</dict>
			</array>
		</dict>
		<key>dict-index</key>
		<dict>
			<key>begin</key>
			<string>(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.begin.python</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.item-access.arguments.python</string>
			<key>end</key>
			<string>(?=\])</string>
			<key>name</key>
			<string>meta.function-call.arguments.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>dict-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#special-names</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  \b ([[:alpha:]_]\w*) \b
</string>
				</dict>
			</array>
		</dict>
		<key>error</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[`?$]</string>
					<key>name</key>
					<string>invalid.illegal.character.python</string>
				</dict>
				<dict>
					<key>match</key>
					<string>-&gt;</string>
					<key>name</key>
					<string>invalid.illegal.annotation.python</string>
				</dict>
			</array>
		</dict>
		<key>escape-sequence</key>
		<dict>
			<key>match</key>
			<string>(?x)
  \\ (
        x[0-9A-Fa-f]{2}
        | [0-7]{1,3}
        | [\\"'abfnrtv]
     )
</string>
			<key>name</key>
			<string>constant.character.python</string>
		</dict>
		<key>escape-sequence-unicode</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)
  \\ (
        u[0-9A-Fa-f]{4}
        | U[0-9A-Fa-f]{8}
        | N\{[\w\s]+?\}
     )
</string>
					<key>name</key>
					<string>constant.character.python</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-brace-formatting</string>
				</dict>
			</array>
		</dict>
		<key>expression</key>
		<dict>
			<key>comment</key>
			<string>All valid Python expressions</string>
			<key>name</key>
			<string>meta.expression.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#error</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#lambda</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#curly-braces</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#item-access</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#list</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#round-braces</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#line-continuation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-functions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-exceptions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#magic-function-names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#magic-variable-names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#member-access</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#special-names</string>
				</dict>
			</array>
		</dict>
		<key>function-arguments</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.begin.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\))</string>
			<key>name</key>
			<string>meta.function-call.arguments.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.arguments.python</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#illegal-names</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function-call.pyhton</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.python</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b([[:alpha:]_]\w*)\s*(=)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\=</string>
					<key>name</key>
					<string>keyword.operator.assignment.python</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>function-call</key>
		<dict>
			<key>begin</key>
			<string>(?x)
  \b(?=
    ([[:alpha:]_]\w*) \s* (\()
  )
</string>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.end.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function-call.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-arguments</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?x)
  \s*
  (?:(async) \s+)? (def)\s+
    (?=
      [[:alpha:]_][[:word:]]+ \s* \(
    )
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.async.python</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(:)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.function.begin.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-def-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-annotation</string>
				</dict>
			</array>
		</dict>
		<key>function-def-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-possible-callables</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  \b ([[:alpha:]_]\w*) \b
</string>
					<key>name</key>
					<string>entity.name.function.python</string>
				</dict>
			</array>
		</dict>
		<key>function-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-possible-callables</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  \b ([[:alpha:]_]\w*) \b
</string>
				</dict>
			</array>
		</dict>
		<key>illegal-names</key>
		<dict>
			<key>match</key>
			<string>(?x)
  \b(
    and | as | assert | async | await | break | class | continue | def
    | del | elif | else | except | exec | finally | for | from | global
    | if | import | in | is | lambda | nonlocal | not | or
    | pass | raise | return | try | while | with | yield
  )\b
</string>
			<key>name</key>
			<string>keyword.control.flow.python</string>
		</dict>
		<key>inheritance-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-callables</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.pyhton</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  \b ([[:alpha:]_]\w*) \b
</string>
				</dict>
			</array>
		</dict>
		<key>item-access</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  \b(?=
    [[:alpha:]_]\w* \s* \[
  )
</string>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.python</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.item-access.python</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#dict-name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#dict-index</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>lambda</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.lambda.python</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(lambda)\s*$</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  \b (lambda) \b
</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.lambda.python</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(:)|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.lambda.begin.python</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.lambda.parameters.python</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\*</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#illegal-names</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.function.language.pyhton</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.parameters.python</string>
								</dict>
							</dict>
							<key>match</key>
							<string>([[:alpha:]_]\w*)\s*(?:(,)|(?=:|$))</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#error</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#lambda-parameter-with-default</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#line-continuation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>lambda-parameter-with-default</key>
		<dict>
			<key>begin</key>
			<string>(?x)
  \b
  ([[:alpha:]_]\w*) \s* (=)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.language.pyhton</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(,)|(?=:|$)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.python</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>line-continuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>separator.continuation.line.python</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\\)\s*$</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>separator.continuation.line.python</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.line.continuation.python</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\\)\s*(\S.*$\n?)</string>
				</dict>
			</array>
		</dict>
		<key>list</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list.begin.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list.end.python</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(True|False|None)\b</string>
					<key>name</key>
					<string>constant.language.python</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number</string>
				</dict>
			</array>
		</dict>
		<key>magic-function-names</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.function.magic.python</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>these methods have magic interpretation by python and are generally called
indirectly through syntactic constructs
</string>
			<key>match</key>
			<string>(?x)
  (\.)?\b(
    __(?:
      abs | add | aenter | aexit | aiter | and | anext | await
      | bool | call | ceil | cmp | coerce | complex | contains
      | copy | deepcopy | del | delattr | delete | delitem
      | delslice | dir | div | divmod | enter | eq | exit | float
      | floor | floordiv | format | ge | get | getattr
      | getattribute | getinitargs | getitem | getnewargs
      | getslice | getstate | gt | hash | hex | iadd | iand | idiv
      | ifloordiv | ilshift | imod | imul | index | init
      | instancecheck | int | invert | ior | ipow | irshift | isub
      | iter | itruediv | ixor | le | len | long | lshift | lt
      | missing | mod | mul | ne | neg | new | next | nonzero | oct | or
      | pos | pow | radd | rand | rdiv | rdivmod | reduce
      | reduce_ex | repr | reversed | rfloordiv | rlshift | rmod
      | rmul | ror | round | rpow | rrshift | rshift | rsub
      | rtruediv | rxor | set | setattr | setitem | setslice
      | setstate | sizeof | str | sub | subclasscheck | truediv
      | trunc | unicode | xor
    )__
  )\b
</string>
		</dict>
		<key>magic-variable-names</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.variable.magic.python</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>magic variables which a class/module may have.</string>
			<key>match</key>
			<string>(?x)
  (\.)?\b(
    __(?:
      all | bases | class | debug | dict | doc | file | members
      | metaclass | methods | module | mro | name | slots
      | subclasses | version | weakref
    )__
  )\b
</string>
		</dict>
		<key>member-access</key>
		<dict>
			<key>begin</key>
			<string>\.(?=\s*\w+\s)</string>
			<key>comment</key>
			<string>this rule exists to highlight errors</string>
			<key>end</key>
			<string>\s</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#illegal-names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#special-names</string>
				</dict>
			</array>
		</dict>
		<key>number</key>
		<dict>
			<key>name</key>
			<string>constant.numeric.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#number-float</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number-dec</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number-hex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number-oct</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number-bin</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number-long</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b[0-9]+\w+</string>
					<key>name</key>
					<string>invalid.illegal.name.python</string>
				</dict>
			</array>
		</dict>
		<key>number-bin</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.number.python</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
  (?&lt;![\w\.])
    (0[bB]) [01]+
  \b
</string>
			<key>name</key>
			<string>constant.numeric.bin.python</string>
		</dict>
		<key>number-dec</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.imaginary.number.python</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.dec.python</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.dec.python</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
  (?&lt;![\w\.])(?:
      [1-9][0-9]*
      |
      0+
      |
      [0-9]+ ([jJ])
      |
      0 ([0-9]+)(?![eE\.])
  )\b
</string>
			<key>name</key>
			<string>constant.numeric.dec.python</string>
		</dict>
		<key>number-float</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.imaginary.number.python</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
  (?&lt;! \w)(?:
    [0-9]*\.[0-9]+ ([eE][+-]?[0-9]+)?
    | [0-9]+\. ([eE][+-]?[0-9]+)?
    | [0-9]+ ([eE][+-]?[0-9]+)
  )([jJ])?\b
</string>
			<key>name</key>
			<string>constant.numeric.float.python</string>
		</dict>
		<key>number-hex</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.number.python</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
  (?&lt;![\w\.])
    (0[xX]) [0-9a-fA-F]+
  \b
</string>
			<key>name</key>
			<string>constant.numeric.hex.python</string>
		</dict>
		<key>number-long</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.number.python</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>this is to support python2 syntax for long ints</string>
			<key>match</key>
			<string>(?x)
  (?&lt;![\w\.])
    ([1-9][0-9]* | 0) ([lL])
  \b
</string>
			<key>name</key>
			<string>constant.numeric.bin.python</string>
		</dict>
		<key>number-oct</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.number.python</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
  (?&lt;![\w\.])
    (0[oO]) [0-7]+
  \b
</string>
			<key>name</key>
			<string>constant.numeric.oct.python</string>
		</dict>
		<key>operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)
    \b(?&lt;!\.)(
        and | or | not | in | is | for | if | else | yield | await
    )(?!\s*:)\b

    | != | == | &gt;= | &lt;= | &lt;&lt; | &gt;&gt; | @=
    | &amp;&amp; | \|\| | \*\* | //
    | &gt; | &lt; | \+ | - | \* | % | \| | &amp; | ^
    | ~ | \? | ! | / | @
</string>
					<key>name</key>
					<string>keyword.operator.python</string>
				</dict>
			</array>
		</dict>
		<key>parameter-with-default</key>
		<dict>
			<key>begin</key>
			<string>(?x)
  \b
  ([[:alpha:]_]\w*) \s* (=)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.language.pyhton</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(,)|(?=\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.python</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>parameters</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.parameters.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\*</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#illegal-names</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.language.pyhton</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.parameters.python</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([[:alpha:]_]\w*)\s*(?:(,)|(?=\)))</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-with-default</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#annotated-parameter</string>
				</dict>
			</array>
		</dict>
		<key>return-annotation</key>
		<dict>
			<key>begin</key>
			<string>-&gt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.annotation.result.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=:)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>round-braces</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.parenthesis.begin.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.parenthesis.end.python</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>special-names</key>
		<dict>
			<key>match</key>
			<string>\b[[:upper:]][[:upper:]\d]*(_\w*)?\b</string>
			<key>name</key>
			<string>constant.other.caps.python</string>
		</dict>
		<key>statement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#class-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#assignment-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
			</array>
		</dict>
		<key>statement-keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b((async\s+)?\s*def)\b</string>
					<key>name</key>
					<string>storage.type.function.python</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  \b(?&lt;!\.)(
    as | async | continue | del | assert | break | finally | for
    | from | elif | else | if | import | except | pass | raise
    | return | try | while | with
  )\b
</string>
					<key>name</key>
					<string>keyword.control.flow.python</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  \b(?&lt;!\.)(
    global | nonlocal
  )\b
</string>
					<key>name</key>
					<string>storage.modifier.declaration.python</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(class)\b</string>
					<key>name</key>
					<string>storage.type.class.python</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>name</key>
			<string>string.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-single-quoted-multi-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-double-quoted-multi-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-single-quoted-single-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-double-quoted-single-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-bin-single-quoted-multi-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-bin-double-quoted-multi-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-bin-single-quoted-single-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-bin-double-quoted-single-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-raw-single-quoted-multi-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-raw-double-quoted-multi-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-raw-single-quoted-single-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-raw-double-quoted-single-line</string>
				</dict>
			</array>
		</dict>
		<key>string-bin-double-quoted-multi-line</key>
		<dict>
			<key>begin</key>
			<string>(\b[bB])?\"\"\"</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\"\"\"</string>
			<key>name</key>
			<string>string.quoted.triple.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-entity</string>
				</dict>
			</array>
		</dict>
		<key>string-bin-double-quoted-single-line</key>
		<dict>
			<key>begin</key>
			<string>(\b[bB])?\"</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?:\"|(?&lt;!\\)(\n))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-entity</string>
				</dict>
			</array>
		</dict>
		<key>string-bin-single-quoted-multi-line</key>
		<dict>
			<key>begin</key>
			<string>(\b[bB])?\'\'\'</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\'\'\'</string>
			<key>name</key>
			<string>string.quoted.triple.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-entity</string>
				</dict>
			</array>
		</dict>
		<key>string-bin-single-quoted-single-line</key>
		<dict>
			<key>begin</key>
			<string>(\b[bB])?\'</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?:\'|(?&lt;!\\)(\n))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-entity</string>
				</dict>
			</array>
		</dict>
		<key>string-brace-formatting</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.format.python</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
  (?:
    {{ | }}
    | (?:
      {
        [^!:\.\[\]]*? (\.[[:alpha:]_]\w*? | \[[^\]]+\])*?
        (![rsa])?
        (:\w? [&lt;&gt;=^]? [-+ ]? \#? \d* ,? (\.\d+)? [bcdeEfFgGnosxX%]?)?
      })
  )
</string>
			<key>name</key>
			<string>constant.character.format.python</string>
		</dict>
		<key>string-double-quoted-multi-line</key>
		<dict>
			<key>begin</key>
			<string>(\b[uU])?\"\"\"</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\"\"\"</string>
			<key>name</key>
			<string>string.quoted.triple.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape-sequence-unicode</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-entity</string>
				</dict>
			</array>
		</dict>
		<key>string-double-quoted-single-line</key>
		<dict>
			<key>begin</key>
			<string>(\b[uU])?\"</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?:\"|(?&lt;!\\)(\n))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape-sequence-unicode</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-entity</string>
				</dict>
			</array>
		</dict>
		<key>string-entity</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape-sequence</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-line-continuation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-formatting</string>
				</dict>
			</array>
		</dict>
		<key>string-formatting</key>
		<dict>
			<key>match</key>
			<string>(?x)
  % (\([\w\s]*\))?
    [-+#0 ]*
    (\d+|\*)? (\.(\d+|\*))?
    ([hlL])?
    [diouxXeEfFgGcrsa%]
</string>
			<key>name</key>
			<string>constant.character.format.python</string>
		</dict>
		<key>string-line-continuation</key>
		<dict>
			<key>match</key>
			<string>\\$</string>
			<key>name</key>
			<string>constant.language.python</string>
		</dict>
		<key>string-raw-double-quoted-multi-line</key>
		<dict>
			<key>begin</key>
			<string>(\b(?:r|R|rb|rB|Rb|RB|br|bR|Br|BR))?\"\"\"</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\"\"\"</string>
			<key>name</key>
			<string>string.quoted.triple.raw.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-formatting</string>
				</dict>
			</array>
		</dict>
		<key>string-raw-double-quoted-single-line</key>
		<dict>
			<key>begin</key>
			<string>(\b(?:r|R|rb|rB|Rb|RB|br|bR|Br|BR))?\"</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?:\"|(?&lt;!\\)(\n))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.raw.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-formatting</string>
				</dict>
			</array>
		</dict>
		<key>string-raw-single-quoted-multi-line</key>
		<dict>
			<key>begin</key>
			<string>(\b(?:r|R|rb|rB|Rb|RB|br|bR|Br|BR))?\'\'\'</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\'\'\'</string>
			<key>name</key>
			<string>string.quoted.triple.raw.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-formatting</string>
				</dict>
			</array>
		</dict>
		<key>string-raw-single-quoted-single-line</key>
		<dict>
			<key>begin</key>
			<string>(\b(?:r|R|rb|rB|Rb|RB|br|bR|Br|BR))?\'</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?:\'|(?&lt;!\\)(\n))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.raw.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-formatting</string>
				</dict>
			</array>
		</dict>
		<key>string-single-quoted-multi-line</key>
		<dict>
			<key>begin</key>
			<string>(\b[uU])?\'\'\'</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\'\'\'</string>
			<key>name</key>
			<string>string.quoted.triple.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape-sequence-unicode</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-entity</string>
				</dict>
			</array>
		</dict>
		<key>string-single-quoted-single-line</key>
		<dict>
			<key>begin</key>
			<string>(\b[uU])?\'</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.python</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?:\'|(?&lt;!\\)(\n))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.python</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.python</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape-sequence-unicode</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-entity</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.python</string>
	<key>uuid</key>
	<string>742deb57-6e38-4192-bed6-410746efd85d</string>
</dict>
</plist>
